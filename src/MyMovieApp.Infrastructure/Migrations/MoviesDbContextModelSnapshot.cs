// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyMovieApp.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyMovieApp.Infrastructure.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    partial class MoviesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyMovieApp.Domain.Entities.Movie", b =>
                {
                    b.Property<string>("ImdbId")
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImdbRating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("ImdbId");

                    b.HasIndex("Title", "Year")
                        .HasDatabaseName("idx_movies_title_year");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("MyMovieApp.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImdbId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserOpinion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("UserRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImdbId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("MyMovieApp.Domain.Entities.Movie", b =>
                {
                    b.OwnsMany("MyMovieApp.Domain.Entities.Actor", "Actor", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("MovieImdbId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.HasKey("Id");

                            b1.HasIndex("MovieImdbId");

                            b1.ToTable("Actors", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieImdbId");
                        });

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("MyMovieApp.Domain.Entities.Review", b =>
                {
                    b.HasOne("MyMovieApp.Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("ImdbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyMovieApp.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
