name: Build Docker Image

on:
    push:
        branches:
            - main
            - develop
        tags:
            - 'v*'
    pull_request:
        branches:
            - main
            - develop
    workflow_dispatch:
      inputs:
        input:
          description: "Build service"
          required: false
          default: "build"

permissions:
  contents: write
  packages: write
  id-token: write

env:
    NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    DOTNET_NOLOGO: true

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            - name: Setup .NET 9
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: '8.0.x'

            - name: Install NodeJS
              uses: actions/setup-node@v3
              with:
                node-version: "16"

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Print Folder Tree
              uses: jaywcjlove/github-action-folder-tree@main
              id: tree
              with:
                exclude: ".git|.github|.vscode|.idea|bin|obj|packages|node_modules|wwwroot"
                depth: 1
                path: ./

            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v0.13.4
              with:
                versionSpec: "5.x"
                preferLatestVersion: true

            - name: Determine Version
              id: gitversion
              uses: gittools/actions/gitversion/execute@v0.13.4
              with:
                useConfigFile: hashFiles('GitVersion.yml') != ''
                configFilePath: GitVersion.yml

            - name: Version
              run: |
                echo Building ${{ steps.gitversion.outputs.SemVer }}

            - name: Restore
              run: dotnet restore MyMovieApp.sln

            - name: Build
              run: dotnet build MyMovieApp.sln -c Release --no-restore --no-incremental /p:Version=${{ steps.gitversion.outputs.MajorMinorPatch }} /p:AssemblyVersion=${{ steps.gitversion.outputs.MajorMinorPatch }} /p:InformationalVersion=${{ steps.gitversion.outputs.MajorMinorPatch }}

            - name: Run NUnit tests
              run: dotnet test MyMovieApp.sln --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults

            - name: Publish Server binaries
              run: dotnet publish -c Release src/MyMovieApp.API --os linux --arch x64 /p:PublishProfile=DefaultContainer /p:Version=${{ steps.gitversion.outputs.MajorMinorPatch }} /p:AssemblyVersion=${{ steps.gitversion.outputs.MajorMinorPatch }} -o ./publish

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Docker image
              run: |
                docker build -t ghcr.io/renan-marcel-org/my-movie-app-api:${{ steps.gitversion.outputs.SemVer }} -f Dockerfile.Build .

            - name: Push Docker image
              run: |
                docker push ghcr.io/renan-marcel-org/my-movie-app-api:${{ steps.gitversion.outputs.SemVer }}

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ steps.gitversion.outputs.SemVer }}
                release_name: Release ${{ steps.gitversion.outputs.SemVer }}
                draft: false
                prerelease: false 

            - name: Generate Release Notes
              id: generate_release_notes
              uses: release-drafter/release-drafter@v5
              with:
                config-name: release-drafter.yml
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
                asset_path: ./src/MyMovieApp.Infrastructure/MyMovieApp.Infrastructure.sql
                asset_name: MyMovieApp.Infrastructure.sql
                asset_content_type: application/sql

              

